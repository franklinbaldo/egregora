name: TENET-BREAK Lint

on:
  pull_request:
    branches:
      - main
      - 'claude/**'
      - 'feature/**'
      - 'fix/**'
  push:
    branches:
      - main
      - 'claude/**'
      - 'feature/**'
      - 'fix/**'

jobs:
  tenet-break-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check TENET-BREAK required fields
        run: |
          python3 - <<'PY'
          import pathlib
          import re
          import sys

          REQUIRED_PATTERNS = {
              "tenet": re.compile(r"tenet=(no-compat|clean|no-defensive|propagate-errors)"),
              "why": re.compile(r"why="),
              "exit": re.compile(r"exit="),
              "due": re.compile(r"due:\d{4}-\d{2}-\d{2}"),
              "reference": re.compile(r"#\d+"),
          }

          COMMENT_LINE_RE = re.compile(r"^\s*(#(?!#)|//|--|;|/\*|<!--)")
          CONTINUATION_LINE_RE = re.compile(r"^\s*(#(?!#)|//|--|;|/\*|<!--|\*)")
          SKIP_DIRS = {".git", ".venv", "node_modules", "__pycache__", ".mypy_cache", ".ruff_cache"}
          SKIP_SUFFIXES = {
              ".png",
              ".jpg",
              ".jpeg",
              ".pdf",
              ".bin",
              ".pyc",
              ".so",
              ".dylib",
          }

          def is_comment_line(line: str, *, allow_block_continuation: bool = False) -> bool:
              pattern = CONTINUATION_LINE_RE if allow_block_continuation else COMMENT_LINE_RE
              return bool(pattern.match(line))

          def should_skip(path: pathlib.Path) -> bool:
              if any(part in SKIP_DIRS for part in path.parts):
                  return True
              return path.suffix.lower() in SKIP_SUFFIXES

          invalid_entries = []
          found_any = False

          for path in pathlib.Path(".").rglob("*"):
              if not path.is_file() or should_skip(path):
                  continue
              try:
                  lines = path.read_text(errors="ignore").splitlines()
              except Exception:
                  continue

              line_index = 0
              while line_index < len(lines):
                  line = lines[line_index]
                  if "TENET-BREAK" not in line or not is_comment_line(line):
                      line_index += 1
                      continue

                  found_any = True
                  block_lines = [line]
                  lookahead = line_index + 1

                  while lookahead < len(lines):
                      next_line = lines[lookahead]
                      stripped = next_line.lstrip()
                      if stripped.startswith("*/"):
                          break
                      if not is_comment_line(next_line, allow_block_continuation=True):
                          break
                      block_lines.append(next_line)
                      lookahead += 1

                  block_text = "\n".join(block_lines)
                  missing = [name for name, pattern in REQUIRED_PATTERNS.items() if not pattern.search(block_text)]
                  if missing:
                      invalid_entries.append((path, line_index + 1, missing, block_lines))

                  line_index = lookahead

          if not found_any:
              print("✅ No TENET-BREAK entries found")
              sys.exit(0)

          if invalid_entries:
              print("❌ Invalid TENET-BREAK entries (missing required metadata):\n")
              for path, line_no, missing, block in invalid_entries:
                  print(f"- {path}:{line_no} missing {', '.join(missing)}")
                  for entry_line in block:
                      print(f"    {entry_line}")
                  print()

              print("TENET-BREAK entries must include:")
              print("  - tenet=(no-compat|clean|no-defensive|propagate-errors)")
              print("  - why=<reason>")
              print("  - exit=<condition>")
              print("  - due:YYYY-MM-DD")
              print("  - #<issue_number>")
              print()
              print("Example:")
              print("  # TENET-BREAK(scope)[@owner][P1][due:2025-12-01]:")
              print("  # tenet=no-compat; why=partner still on v1; exit=partner migrates (#742)")
              sys.exit(1)

          print("✅ All TENET-BREAK entries have required fields")
          PY

      - name: Check for overdue TENET-BREAK entries
        run: |
          echo "Checking for overdue TENET-BREAK entries..."

          python3 - <<'PY'
          import re
          import sys
          import datetime
          import pathlib

          today = datetime.date.today()
          bad = []

          COMMENT_LINE_RE = re.compile(r"^\s*(#(?!#)|//|--|;|/\*|<!--)")
          CONTINUATION_LINE_RE = re.compile(r"^\s*(#(?!#)|//|--|;|/\*|<!--|\*)")

          def is_comment_line(line: str, *, allow_block_continuation: bool = False) -> bool:
              pattern = CONTINUATION_LINE_RE if allow_block_continuation else COMMENT_LINE_RE
              return bool(pattern.match(line))

          def iter_tenet_break_blocks(path: pathlib.Path):
              try:
                  lines = path.read_text(errors="ignore").splitlines()
              except Exception:
                  return

              index = 0
              while index < len(lines):
                  line = lines[index]
                  if "TENET-BREAK" not in line or not is_comment_line(line):
                      index += 1
                      continue

                  block_lines = [line]
                  lookahead = index + 1

                  while lookahead < len(lines):
                      next_line = lines[lookahead]
                      stripped = next_line.lstrip()
                      if stripped.startswith("*/"):
                          break
                      if not is_comment_line(next_line, allow_block_continuation=True):
                          break
                      block_lines.append(next_line)
                      lookahead += 1

                  yield index + 1, "\n".join(block_lines), block_lines
                  index = lookahead

          for path in pathlib.Path(".").rglob("*"):
              if not path.is_file() or path.suffix in {".png", ".jpg", ".jpeg", ".pdf", ".bin", ".pyc", ".so", ".dylib", ".git"}:
                  continue

              for start_line, block_text, block_lines in iter_tenet_break_blocks(path):
                  match = re.search(r"due:(\d{4})-(\d{2})-(\d{2})", block_text)
                  if not match:
                      continue

                  due_date = datetime.date(*map(int, match.groups()))
                  if due_date < today:
                      first_line = block_lines[0].strip()
                      bad.append(
                          f"{path}:{start_line}: overdue TENET-BREAK (due {due_date}) -> {first_line}"
                      )

          if bad:
              print("❌ Found overdue TENET-BREAK entries:\n")
              print("\n".join(bad))
              print("\n")
              print("TENET-BREAK entries with past due dates must be:")
              print("  1. Fixed/removed if the exit condition was met")
              print("  2. Updated with a new due date if still blocked")
              print("  3. Escalated if the breach is becoming permanent")
              sys.exit(1)

          print("✅ No overdue TENET-BREAK entries found")
          PY
