name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}
          repository: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install uv
        run: pip install uv
      - name: Sync dependencies
        run: uv sync --extra docs --extra lint
      - name: Lint Markdown
        run: |
          set -o errexit
          set +H
          npx --yes markdownlint-cli2 -- "**/*.md" "!**/.venv/**" "!**/node_modules/**" "!**/cache/**" "!**/artifacts/**" "!**/media/**"
      - name: Run codespell
        run: |
          set -o errexit
          uv run --with codespell codespell --quiet-level=2 $(cat codespell_targets.txt)
      - name: Build docs
        run: uv run mkdocs build --strict
      - name: Run pre-commit (auto-fix)
        run: |
          set +e
          uv run pre-commit run --all-files --show-diff-on-failure
          status=$?
          if [ "$status" -ne 0 ] && [ -z "$(git status --porcelain)" ]; then
            exit $status
          fi

      - name: Commit and push lint fixes
        if: ${{ always() }}
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
            exit 0
          fi

          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
            echo "Automatic lint fixes require write access to the source branch." >&2
            echo "Re-run pre-commit locally and push the changes manually." >&2
            exit 1
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: apply automatic lint fixes"
          git push origin HEAD:${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name }}

      - name: Verify pre-commit
        run: uv run pre-commit run --all-files --show-diff-on-failure
      - name: Run tests
        run: uv run --with pytest pytest
      - name: Backlog smoke test
        run: |
          uv run python scripts/process_backlog.py tests/data/zips ./_tmp_posts --force --offline --quiet
          test -d ./_tmp_posts
      - name: Build RAG embeddings artifact
        run: |
          uv run python - <<'PY'
          from pathlib import Path
          import shutil

          from egregora.config import PipelineConfig
          from egregora.rag.index import PostRAG

          pipeline_config = PipelineConfig.from_toml(Path("egregora.toml"))
          rag_config = pipeline_config.rag

          source_posts = Path("tests/data/rag_posts")
          cache_root = Path("cache/rag_ci")
          posts_dir = cache_root / "posts"

          if posts_dir.exists():
              shutil.rmtree(posts_dir)

          for group_dir in source_posts.iterdir():
              if not group_dir.is_dir():
                  continue
              daily_dir = group_dir / "daily"
              if not daily_dir.is_dir():
                  continue
              target_daily = posts_dir / group_dir.name / "posts" / "daily"
              target_daily.mkdir(parents=True, exist_ok=True)
              for markdown in daily_dir.glob("*.md"):
                  shutil.copy2(markdown, target_daily / markdown.name)

          rag = PostRAG(posts_dir=posts_dir, config=rag_config, cache_dir=cache_root)
          result = rag.update_index(force_rebuild=True)
          print(f"Generated {result.get('embedding_rows', 0)} embedding rows at {result.get('embedding_export_path')}")
          PY
      - name: Upload RAG embeddings artifact
        uses: actions/upload-artifact@v4
        with:
          name: rag-post-embeddings
          path: artifacts/embeddings/post_chunks.parquet
          if-no-files-found: error
