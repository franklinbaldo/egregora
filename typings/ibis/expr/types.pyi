from __future__ import annotations

from collections.abc import Iterable, Mapping, Sequence
from typing import Any, Protocol

from .. import Schema

class ScalarResult(Protocol):
    def execute(self) -> Any: ...

class GroupedTable(Protocol):
    def aggregate(self, metrics: Mapping[str, Any] | None = ..., **kwargs: Any) -> Table: ...

class Table:
    columns: Sequence[str]

    def __getitem__(self, key: str) -> Any: ...

    def __getattr__(self, name: str) -> Any: ...

    def select(self, columns: Sequence[str]) -> Table: ...

    def mutate(self, **updates: Any) -> Table: ...

    def union(self, other: Table, *, distinct: bool = ...) -> Table: ...

    def count(self) -> ScalarResult: ...

    def execute(self) -> Any: ...

    def schema(self) -> Schema: ...

    def op(self) -> Any: ...

    def filter(self, *predicates: Any, **kwargs: Any) -> Table: ...

    def group_by(self, keys: Any) -> GroupedTable: ...

    def drop(self, columns: Sequence[str]) -> Table: ...

    def order_by(self, keys: Sequence[Any]) -> Table: ...

__all__ = ["Table"]
