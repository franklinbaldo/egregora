from __future__ import annotations

from collections.abc import Iterable, Mapping, Sequence
from typing import Any, overload

class DuckDBPyRelation:
    def fetchone(self) -> tuple[Any, ...] | None: ...
    def fetchall(self) -> list[tuple[Any, ...]]: ...
    def arrow(self) -> Any: ...

class DuckDBPyConnection:
    def execute(self, query: str, parameters: Sequence[Any] | Mapping[str, Any] | None = ...) -> DuckDBPyRelation: ...
    def register(self, name: str, value: Any) -> None: ...
    def table(self, name: str) -> DuckDBPyRelation: ...
    def close(self) -> None: ...

class Error(Exception): ...

@overload
def connect(database: str, read_only: bool | None = ...) -> DuckDBPyConnection: ...

@overload
def connect(database: None = ..., read_only: bool | None = ...) -> DuckDBPyConnection: ...

__all__ = [
    "DuckDBPyConnection",
    "DuckDBPyRelation",
    "Error",
    "connect",
]
