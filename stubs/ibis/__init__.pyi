from __future__ import annotations

from typing import Any, Sequence

from .expr.types import Table

class Schema:
    names: Sequence[str]

    def items(self) -> Any: ...
    def to_pyarrow(self) -> Any: ...
    def __getattr__(self, name: str) -> Any: ...

class _DuckDBNamespace:
    def connect(self, *args: Any, **kwargs: Any) -> Any: ...
    def from_connection(self, *args: Any, **kwargs: Any) -> Any: ...

class _OptionsNamespace:
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...

def schema(*args: Any, **kwargs: Any) -> Schema: ...
def memtable(*args: Any, **kwargs: Any) -> Table: ...
def desc(*args: Any, **kwargs: Any) -> Any: ...
def literal(*args: Any, **kwargs: Any) -> Any: ...
def null() -> Any: ...
def ifelse(*args: Any, **kwargs: Any) -> Any: ...
def read_csv(*args: Any, **kwargs: Any) -> Table: ...
def window(*args: Any, **kwargs: Any) -> Any: ...
def row_number() -> Any: ...

class _DeferredNamespace:
    def __getattr__(self, name: str) -> Any: ...

class _UDFNamespace:
    def __getattr__(self, name: str) -> Any: ...

class _FilesNamespace:
    def upload(self, *args: Any, **kwargs: Any) -> Any: ...

def __getattr__(name: str) -> Any: ...

_: _DeferredNamespace
udf: _UDFNamespace
options: _OptionsNamespace
files: _FilesNamespace

duckdb: _DuckDBNamespace
