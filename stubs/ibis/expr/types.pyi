from __future__ import annotations

from typing import Any, Iterable, Mapping

class Column:
    def cast(self, *args: Any, **kwargs: Any) -> Column: ...
    def __getattr__(self, name: str) -> Any: ...

class Table:
    def __getitem__(self, key: str) -> Column: ...
    def aggregate(self, *args: Any, **kwargs: Any) -> Table: ...
    def order_by(self, *args: Any, **kwargs: Any) -> Table: ...
    def filter(self, *args: Any, **kwargs: Any) -> Table: ...
    def limit(self, *args: Any, **kwargs: Any) -> Table: ...
    def count(self, *args: Any, **kwargs: Any) -> Any: ...
    def execute(self) -> Any: ...
    def mutate(self, *args: Any, **kwargs: Any) -> Table: ...
    def join(self, *args: Any, **kwargs: Any) -> Table: ...
    def select(self, *args: Any, **kwargs: Any) -> Table: ...
    def union(self, other: Table, *, distinct: bool = ...) -> Table: ...
    def column(self, name: str) -> Column: ...
    def schema(self) -> Any: ...
    def to_pylist(self) -> list[Mapping[str, Any]]: ...
    def columns(self) -> Any: ...
    def group_by(self, *args: Any, **kwargs: Any) -> Table: ...
    def drop(self, *args: Any, **kwargs: Any) -> Table: ...
    def distinct(self, *args: Any, **kwargs: Any) -> Table: ...
    def order(self, *args: Any, **kwargs: Any) -> Table: ...
    def to_pyarrow(self) -> Any: ...
    @classmethod
    def from_pydict(cls, data: Mapping[str, Iterable[Any]]) -> Table: ...
    def __getattr__(self, name: str) -> Any: ...

class Expr:
    def cast(self, *args: Any, **kwargs: Any) -> Expr: ...
    def over(self, *args: Any, **kwargs: Any) -> Expr: ...
    def limit(self, *args: Any, **kwargs: Any) -> Expr: ...

class Window:
    ...

__all__ = ["Table", "Column", "Expr", "Window"]
